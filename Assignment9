// Assignment #: ASU CSE205 Assignment #9
//         Name: Megan McElenney
//    StudentID:1214828277
//      Lecture: T Th 4:30-5:45
//  Description: this program reads in a sequence of numbers from standard
//  input until 0 is read and stores the numbers in an array, it then
//  computes the largest number, the count of even numbers (includes both postive and negative),
//  the number of -1s inside the array, and also compute the sum of numbers at
//  odd indexes (i.e. 1, 3, 5, ...), using recursion.

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Assignment9
{
	//main method
	public static void main (String[] args) throws IOException
	{
		//gets input
		InputStreamReader inpp = new InputStreamReader (System.in);
	    BufferedReader stdin = new BufferedReader (inpp);
		//creates an array of 100 elements
	    int[] inp = new int[100];
	    //places the input into the array
	    for(int i = 0; i < inp.length-1; i++)
	    {
    	  
    	  int input = Integer.parseInt(stdin.readLine());
    	  inp[i] = input;
    	  //stops the input
    	  if(input == 0)
    		  i = 101; 
	    }
	    //prints out results
		System.out.println("The largest number is " + findMax(inp, 0, inp.length-1));
		System.out.println("The total number of even integers is " + countEven(inp, 0, inp.length-1));
		System.out.println("The total number of -1 is " + countNegativeOne(inp, inp.length-1));
		System.out.println("The sum of numbers at odd indexes is " + computeSumAtOddIndexes(inp, 1));
	}

	//The method finds the largest number in the partial array range 
	//from startIndex to endIndex
	public static int findMax(int[ ] numbers, int startIndex, int endIndex)
	{
		//set the max to the last number
		int max = numbers[endIndex];
		//base case
		if(startIndex == endIndex)
			return max;
		//sees if first is bigger than last, if it is, last is dropped
		else if(numbers[startIndex] > numbers[endIndex])
			return findMax(numbers, startIndex, endIndex-1);
		//first is dropped because it isn't bigger than last
		else
			return findMax(numbers, startIndex+1, endIndex);
	}
	
	//The method counts the number of even integers in the partial array range
	//from startIndex to endIndex
	public static int countEven(int[ ] numbers, int startIndex, int endIndex)
	{
		int count = 0;
		//base case
		if(startIndex == endIndex)
			return 0;
		//sees it it is even then increments count
		if(numbers[startIndex]%2 == 0 && numbers[startIndex]!=0)
			count++;
		//sets count equal to itself plus the next recursion
		count = countEven(numbers, startIndex+1, endIndex) + count;
		return count;
	}
	
	//The method counts the number of -1 inside an array with "count" numbers, 
	//index ranges from 0 to count-1
	public static int countNegativeOne(int[ ] numbers, int count)
	{
		int negg = 0;
		//base case
		if(count < 0)
			return 0;
		//checks if element is -1 and increments negg
		if(numbers[count] == -1)
			negg++;
		//sets negg equal to itself plus the next recursion
		negg = countNegativeOne(numbers, count-1) + negg;
		return negg;
	}
	
	//The method computes the sum of numbers at index 1, 3, 5, ... inside a partial 
	//array with "count" numbers inside, index ranges from 0 to count-1
	public static int computeSumAtOddIndexes(int[ ] numbers, int count)
	{
		int sum = 0;
		//base case that checks if the array is over
		if(count+1 >= numbers.length)
			return 0;
		//sets sum to the current elements value plus the recursion of the rest of the array
		sum = numbers[count] + computeSumAtOddIndexes(numbers, count+2);
		return sum;
	}


}// end of class Assignment9
